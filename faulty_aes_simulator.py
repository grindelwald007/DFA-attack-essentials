import numpy as np
from e1_image_set import gf_mult as galois_multiplication

K_9 = np.array([
    [0xac, 0x19, 0x28, 0x57],
    [0x77, 0xfa, 0xd1, 0x5c],
    [0x66, 0xdc, 0x29, 0x00],
    [0xf3, 0x21, 0x41, 0x6e]]
)

K_10 = np.array([
    [0xd0, 0xc9, 0xe1, 0xb6],
    [0x14, 0xee, 0x3f, 0x63],
    [0xf9, 0x25, 0x0c, 0x0c],
    [0xa8, 0x89, 0xc8, 0xa6]]
)

SR_9 = np.array([
    [0x87, 0xf2, 0x4d, 0x97],
    [0x6e, 0x4c, 0x90, 0xec],
    [0x46, 0xe7, 0x4a, 0xc3],
    [0xa6, 0x8c, 0xd8, 0x95]]
)

Sbox = (   
            0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
            0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
            0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
            0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
            0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
            0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
            0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
            0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
            0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
            0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
            0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
            0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
            0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
            0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
            0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
            0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
        )

class AesSimulator:
    def __init__(self, state):
        if state.shape != (4, 4):
            raise ValueError("State must be 4x4.")
        self.state = state
        
        
    def inject_fault(self, fault, row, col):
        self.state[row, col] = self.state[row, col] ^ fault
        return self.state
    

    def mix_single_column(self, column):
        temp = column.copy()
    
        column[0] = galois_multiplication(temp[0], 2) ^ galois_multiplication(temp[1], 3) ^ temp[2] ^ temp[3]
        column[1] = temp[0] ^ galois_multiplication(temp[1], 2) ^ galois_multiplication(temp[2], 3) ^ temp[3]
        column[2] = temp[0] ^ temp[1] ^ galois_multiplication(temp[2], 2) ^ galois_multiplication(temp[3], 3)
        column[3] = galois_multiplication(temp[0], 3) ^ temp[1] ^ temp[2] ^ galois_multiplication(temp[3], 2)

        return column

    def mix_columns(self):
        for i in range(4):
            self.state[:, i] = self.mix_single_column(self.state[:, i])
        return self.state
    
    def add_key(self, key):
        for i in range(self.state.shape[0]):
            for j in range(self.state.shape[1]):
                self.state[i, j] = self.state[i, j] ^ key[i, j]
                
        return self.state

    def sub_bytes(self):
        for i in range(self.state.shape[0]):
            for j in range(self.state.shape[1]):
                self.state[i, j] = Sbox[self.state[i, j]]
                
        return self.state
    
    def shift_rows(self):
        self.state[1] = np.roll(self.state[1], -1)  # Shift row 1 by 1
        self.state[2] = np.roll(self.state[2], -2)  # Shift row 2 by 2
        self.state[3] = np.roll(self.state[3], -3)  # Shift row 3 by 3
        return self.state
    
    def get_state(self):
        return self.state
    
    @staticmethod
    def matrix_to_hex(matrix):
        hex_matrix = np.vectorize(lambda x: hex(x))(matrix)
        return hex_matrix

def get_enc_with_fault(fault, row, col):
    aes_1 = AesSimulator(SR_9.copy())
    aes_1.inject_fault(fault, row, col)
    aes_1.mix_columns()
    aes_1.add_key(K_9)
    aes_1.sub_bytes()
    aes_1.shift_rows()
    result = aes_1.add_key(K_10)
    return result

def get_enc_without_fault():
    aes_2 = AesSimulator(SR_9.copy())
    aes_2.mix_columns()
    aes_2.add_key(K_9)
    aes_2.sub_bytes()
    aes_2.shift_rows()
    result = aes_2.add_key(K_10)
    return result

def get_differential_faults(fault, row, col):
    state_faulty = get_enc_with_fault(fault, row, col)
    # print(f"state_faulty \n{AesSimulator.matrix_to_hex(state_faulty)}\n")
    
    state_correct = get_enc_without_fault()
    # print(f"state_correct \n{AesSimulator.matrix_to_hex(state_correct)}\n")
    
    state_error = np.array([[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]])
    
    res = []
    
    for i in range(state_error.shape[0]):
        for j in range(state_error.shape[1]):
            state_error[i, j] = state_correct[i, j] ^ state_faulty[i, j]
            if state_error[i, j] != 0:
                res.append((hex(state_error[i, j]), (i, j)))
            
    # print(f"state_error \n{AesSimulator.matrix_to_hex(state_error)}\n")
    return res, state_faulty